server.port=8080

# SETUP LOCAL h2 DATABASE CONFIG
# spring.datasource.url=jdbc:h2:file:./data/demo
# spring.datasource.driverClassName=org.h2.Driver
# spring.datasource.username=admin
# spring.datasource.password=password
# spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
# spring.jpa.hibernate.ddl-auto=create-drop
# spring.jpa.show-sql=true

# SETUP LOCAL H2 DATABASE CONSOLE
# spring.h2.console.enabled=true
# spring.h2.console.path=/h2-console
# spring.h2.console.settings.web-allow-others=false


# SETUP PostgreSQL
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}

# HIBERNATE
# spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.datasource.driver-class-name=org.postgresql.Driver

# THYMELEAF
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.cache=false

# spring.jpa.open-in-view=false

# logging.level.org.springframework.transaction=DEBUG
# logging.level.org.hibernate.SQL=DEBUG
# logging.level.org.springframework.security=DEBUG

# SETUP GOOGLE OAUTH SETTINGS
spring.security.oauth2.client.registration.google.client-id=${CLIENT_ID_GOOGLE}
spring.security.oauth2.client.registration.google.client-secret=${CLIENT_SECRET_GOOGLE}
spring.security.oauth2.client.registration.google.scope=email,profile
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/login/oauth2/code/google
spring.security.oauth2.client.registration.google.client-name=Google
